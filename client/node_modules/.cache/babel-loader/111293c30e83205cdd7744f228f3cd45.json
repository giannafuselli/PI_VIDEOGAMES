{"ast":null,"code":"import { GET_ALL_VGAMES, GET_DETAIL, GET_GENRES, POST_VGAME, PAGINADO, SEARCH_NAME, DELETE_VGAME, UPDATE_VGAME, CLEAR_DETAIL, FILTER_BANK, REMOVE_FILTER, FILTER_APPLY, REMOVE_ALL_FILTER, ERRORS, CLEAR_ERRORS, NOT_RELOAD } from \"./actions\";\nlet initialState = {\n  videoGames: [],\n  pageNumbers: [],\n  gamesFiltered: [],\n  detail: {},\n  genres: [],\n  coincidences: true,\n  arr_of_filterObjs: [],\n  errors: {},\n  not_reload: false,\n  paginado: [],\n  currentPage: 1,\n  pages: [],\n  filteredPaginate: []\n};\nfunction rootReducer(state = initialState, action) {\n  const ITEMS_PER_PAGE = 15;\n  switch (action.type) {\n    case GET_ALL_VGAMES:\n      const totalPagesGet = Math.ceil(action.payload.length / ITEMS_PER_PAGE);\n      const pagesGet = [...Array(totalPagesGet + 1).keys()].slice(1);\n      const indexOfLastP = state.currentPage * ITEMS_PER_PAGE;\n      const indexOfFirstP = indexOfLastP - ITEMS_PER_PAGE;\n      const vgRenderGet = action.payload.slice(indexOfFirstP, indexOfLastP);\n      return {\n        ...state,\n        videoGames: action.payload,\n        filteredPaginate: action.payload,\n        pages: pagesGet,\n        paginado: vgRenderGet\n      };\n    case PAGINADO:\n      var current;\n      if (isNaN(action.payload)) {\n        if (action.payload === \"next\") {\n          if (state.currentPage !== state.pages.length) {\n            current = state.currentPage + 1;\n          } else {\n            return {\n              ...state\n            };\n          }\n        } else if (action.payload === \"end\") {\n          if (state.currentPage !== state.pages.length) {\n            current = state.pages.length;\n          } else {\n            return {\n              ...state\n            };\n          }\n        } else if (action.payload === \"prev\") {\n          if (state.currentPage !== 1) {\n            current = state.currentPage - 1;\n          } else {\n            return {\n              ...state\n            };\n          }\n        } else if (action.payload === \"start\") {\n          if (state.currentPage !== 1) {\n            current = 1;\n          } else {\n            return {\n              ...state\n            };\n          }\n        }\n      } else {\n        current = action.payload;\n      }\n      const totalPages = Math.ceil(state.filteredPaginate.length / ITEMS_PER_PAGE);\n      const pages = [...Array(totalPages + 1).keys()].slice(1);\n      const indexOfLastPage = current * ITEMS_PER_PAGE;\n      const indexOfFirstPage = indexOfLastPage - ITEMS_PER_PAGE;\n      const vgRender = state.filteredPaginate.slice(indexOfFirstPage, indexOfLastPage);\n      return {\n        ...state,\n        currentPage: current,\n        paginado: vgRender,\n        pages: pages\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        detail: action.payload\n      };\n    case NOT_RELOAD:\n      return {\n        ...state,\n        not_reload: action.payload\n      };\n    case GET_GENRES:\n      return {\n        ...state,\n        genres: action.payload\n      };\n    case ERRORS:\n      const objError = action.payload;\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          [objError.type]: objError.error\n        }\n      };\n    case CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: {}\n      };\n    case POST_VGAME:\n      return {\n        ...state,\n        errors: {}\n      };\n    case FILTER_BANK:\n      let array = state.arr_of_filterObjs;\n      //Me aseguro q no haya dos iguales\n      if (action.payload.type === \"games\") array = array.filter(x => x.type !== \"games\");\n      if (action.payload.type === \"sort\") array = array.filter(x => x.type !== \"sort\");\n      if (action.payload.type === \"genres\") array = array.filter(x => x.type !== \"genres\");\n      array = [...array, action.payload];\n      return {\n        ...state,\n        arr_of_filterObjs: array\n      };\n    case REMOVE_FILTER:\n      let arr = state.arr_of_filterObjs;\n      let deletedFilter = arr.filter(x => x.value !== action.payload);\n      return {\n        ...state,\n        arr_of_filterObjs: deletedFilter\n      };\n    case FILTER_APPLY:\n      const filterObjs = state.arr_of_filterObjs;\n      const games = filterObjs.find(x => x.type === \"games\");\n      const sort = filterObjs.find(x => x.type === \"sort\");\n      const genres = filterObjs.find(x => x.type === \"genres\");\n      let videoGames = state.videoGames;\n      if (games) {\n        if (games.value === \"Existing\") {\n          videoGames = videoGames.filter(x => !x.createdInDb);\n        } else if (games.value === \"Created\") {\n          videoGames = videoGames.filter(x => x.createdInDb);\n        }\n      }\n      if (sort) {\n        if (sort.value === \"A-Z\") {\n          videoGames = videoGames.sort((a, b) => a.name.localeCompare(b.name));\n        } else if (sort.value === \"Z-A\") {\n          videoGames = videoGames.sort((a, b) => b.name.localeCompare(a.name));\n        } else if (sort.value === \"Increase Rating\") {\n          videoGames = videoGames.sort((a, b) => a.rating - b.rating);\n        } else if (sort.value === \"Decrease Rating\") {\n          videoGames = videoGames.sort((a, b) => b.rating - a.rating);\n        }\n      }\n      if (genres) {\n        videoGames = videoGames.filter(x => x.genres.some(j => j.name === genres.value));\n      }\n      if (videoGames.length > 0) {\n        const totalPages = Math.ceil(videoGames.length / ITEMS_PER_PAGE);\n        const pages = [...Array(totalPages + 1).keys()].slice(1);\n        const indexOfLastPage = ITEMS_PER_PAGE;\n        const indexOfFirstPage = indexOfLastPage - ITEMS_PER_PAGE;\n        const vgRender = videoGames.slice(indexOfFirstPage, indexOfLastPage);\n        return {\n          ...state,\n          currentPage: 1,\n          filteredPaginate: videoGames,\n          pages: pages,\n          paginado: vgRender\n        };\n      } else {\n        return {\n          ...state,\n          coincidences: false,\n          paginado: []\n        };\n      }\n    case REMOVE_ALL_FILTER:\n      return {\n        ...state,\n        arr_of_filterObjs: []\n      };\n    case SEARCH_NAME:\n      const response = action.payload;\n      if (response.length > 0) {\n        const totalPages = Math.ceil(response.length / ITEMS_PER_PAGE);\n        const pages = [...Array(totalPages + 1).keys()].slice(1);\n        const indexOfLastPage = ITEMS_PER_PAGE;\n        const indexOfFirstPage = indexOfLastPage - ITEMS_PER_PAGE;\n        const vgRender = response.slice(indexOfFirstPage, indexOfLastPage);\n        return {\n          ...state,\n          currentPage: 1,\n          filteredPaginate: response,\n          pages: pages,\n          paginado: vgRender,\n          coincidences: true\n        };\n      } else {\n        return {\n          ...state,\n          coincidences: false,\n          paginado: []\n        };\n      }\n      ;\n    case DELETE_VGAME:\n      return {\n        ...state\n      };\n    case UPDATE_VGAME:\n      return {\n        ...state,\n        detail: action.payload\n      };\n    case CLEAR_DETAIL:\n      return {\n        ...state,\n        detail: {}\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n}\n;\nexport default rootReducer;","map":{"version":3,"names":["GET_ALL_VGAMES","GET_DETAIL","GET_GENRES","POST_VGAME","PAGINADO","SEARCH_NAME","DELETE_VGAME","UPDATE_VGAME","CLEAR_DETAIL","FILTER_BANK","REMOVE_FILTER","FILTER_APPLY","REMOVE_ALL_FILTER","ERRORS","CLEAR_ERRORS","NOT_RELOAD","initialState","videoGames","pageNumbers","gamesFiltered","detail","genres","coincidences","arr_of_filterObjs","errors","not_reload","paginado","currentPage","pages","filteredPaginate","rootReducer","state","action","ITEMS_PER_PAGE","type","totalPagesGet","Math","ceil","payload","length","pagesGet","Array","keys","slice","indexOfLastP","indexOfFirstP","vgRenderGet","current","isNaN","totalPages","indexOfLastPage","indexOfFirstPage","vgRender","objError","error","array","filter","x","arr","deletedFilter","value","filterObjs","games","find","sort","createdInDb","a","b","name","localeCompare","rating","some","j","response"],"sources":["C:/Users/fusel/Videojuegos-PI/client/src/redux/reducer.js"],"sourcesContent":["import {\r\n    GET_ALL_VGAMES, GET_DETAIL, GET_GENRES, POST_VGAME, PAGINADO, \r\n    SEARCH_NAME, DELETE_VGAME, UPDATE_VGAME, CLEAR_DETAIL,\r\n    FILTER_BANK, REMOVE_FILTER, FILTER_APPLY, REMOVE_ALL_FILTER,\r\n    ERRORS, CLEAR_ERRORS, NOT_RELOAD\r\n   } from \"./actions\";\r\n\r\nlet initialState ={\r\n    videoGames :[],\r\n    pageNumbers:[],\r\n    gamesFiltered: [],\r\n    detail: {},\r\n    genres: [],\r\n    coincidences: true,\r\n    arr_of_filterObjs: [],\r\n    errors: {},\r\n    not_reload: false,\r\n    paginado: [],\r\n    currentPage: 1,\r\n    pages: [],\r\n    filteredPaginate:[]\r\n}\r\n\r\nfunction rootReducer(state = initialState, action){\r\n    const ITEMS_PER_PAGE = 15;\r\n\r\n    switch(action.type){\r\n        case GET_ALL_VGAMES:\r\n            const totalPagesGet = Math.ceil(action.payload.length / ITEMS_PER_PAGE)\r\n            const pagesGet = [...Array(totalPagesGet + 1).keys()].slice(1)\r\n\r\n            const indexOfLastP = state.currentPage * ITEMS_PER_PAGE\r\n            const indexOfFirstP = indexOfLastP- ITEMS_PER_PAGE\r\n\r\n            const vgRenderGet = action.payload.slice(indexOfFirstP, indexOfLastP)\r\n            return {\r\n                ...state,\r\n                videoGames: action.payload,\r\n                filteredPaginate: action.payload,\r\n                pages: pagesGet,\r\n                paginado: vgRenderGet\r\n\r\n            }\r\n        case PAGINADO:\r\n            var current\r\n          if(isNaN(action.payload)){\r\n            if(action.payload === \"next\"){\r\n                if(state.currentPage !== state.pages.length){ current = state.currentPage +1}\r\n                else{\r\n                    return {...state}\r\n                }\r\n            }else if(action.payload === \"end\"){\r\n                if(state.currentPage !== state.pages.length){\r\n                    current = state.pages.length;\r\n                }else{\r\n                    return{...state}\r\n                }\r\n            }else if(action.payload === \"prev\"){\r\n                if(state.currentPage !== 1){\r\n                    current = state.currentPage -1\r\n                  }else{\r\n                        return{...state}\r\n                    }\r\n            }else if(action.payload === \"start\"){\r\n                if(state.currentPage !== 1){\r\n                  current = 1\r\n                }else{\r\n                    return{...state}\r\n                }\r\n            }}else{\r\n                current = action.payload\r\n            }\r\n            const totalPages = Math.ceil(state.filteredPaginate.length / ITEMS_PER_PAGE)\r\n            const pages = [...Array(totalPages + 1).keys()].slice(1)\r\n\r\n            const indexOfLastPage = current * ITEMS_PER_PAGE\r\n            const indexOfFirstPage = indexOfLastPage - ITEMS_PER_PAGE\r\n\r\n            const vgRender = state.filteredPaginate.slice(indexOfFirstPage, indexOfLastPage)\r\n             return{\r\n                ...state,\r\n                currentPage: current,\r\n                paginado: vgRender,\r\n                pages:pages\r\n             } \r\n\r\n        case GET_DETAIL:\r\n            return{\r\n                ...state,\r\n                detail: action.payload\r\n            } \r\n        case NOT_RELOAD:\r\n            return{\r\n                ...state,\r\n                not_reload: action.payload\r\n            }\r\n        case GET_GENRES: \r\n            return{\r\n                ...state,\r\n                genres: action.payload\r\n            }\r\n        case ERRORS:\r\n            const objError = action.payload\r\n            return{\r\n                ...state,\r\n                errors: {...state.errors, [objError.type]: objError.error}\r\n            }\r\n        case CLEAR_ERRORS:\r\n            return{\r\n                ...state,\r\n                errors: {}\r\n            }    \r\n        case POST_VGAME:\r\n            return{\r\n                ...state,\r\n                errors: {}\r\n            }    \r\n        \r\n        case FILTER_BANK:\r\n            let array = state.arr_of_filterObjs;\r\n            //Me aseguro q no haya dos iguales\r\n            if(action.payload.type === \"games\") array = array.filter((x)=>x.type !== \"games\") \r\n            if(action.payload.type === \"sort\") array = array.filter((x)=>x.type !== \"sort\")\r\n            if(action.payload.type === \"genres\") array = array.filter((x)=>x.type !== \"genres\")\r\n            array = [...array, action.payload]\r\n            return{\r\n            ...state,\r\n            arr_of_filterObjs: array\r\n            }\r\n\r\n        case REMOVE_FILTER:\r\n            let arr = state.arr_of_filterObjs;\r\n            let deletedFilter = arr.filter((x)=> x.value !== action.payload)\r\n            return{\r\n                ...state,\r\n                arr_of_filterObjs: deletedFilter\r\n            }\r\n        case FILTER_APPLY:\r\n            const filterObjs = state.arr_of_filterObjs;\r\n            const games = filterObjs.find(x=>x.type === \"games\")\r\n            const sort = filterObjs.find(x=>x.type === \"sort\")\r\n            const genres = filterObjs.find(x=>x.type === \"genres\")\r\n            \r\n            let videoGames = state.videoGames\r\n\r\n            if(games){\r\n                if(games.value === \"Existing\"){\r\n                    videoGames = videoGames.filter(x=>!x.createdInDb)\r\n                }else if(games.value === \"Created\"){\r\n                    videoGames = videoGames.filter(x=> x.createdInDb)\r\n                }\r\n            }\r\n            if(sort){\r\n                if(sort.value === \"A-Z\"){\r\n                    videoGames = videoGames.sort((a,b)=> a.name.localeCompare(b.name))\r\n                }else if(sort.value === \"Z-A\"){\r\n                    videoGames = videoGames.sort((a,b)=> b.name.localeCompare(a.name))\r\n                }else if(sort.value === \"Increase Rating\"){\r\n                    videoGames = videoGames.sort((a,b)=> a.rating - b.rating)\r\n                }else if(sort.value === \"Decrease Rating\"){\r\n                    videoGames = videoGames.sort((a,b)=> b.rating - a.rating)\r\n                }\r\n            }\r\n            if(genres){\r\n                videoGames = videoGames.filter(x =>x.genres.some(j=>j.name === genres.value))\r\n            }\r\n            if(videoGames.length >0){\r\n                const totalPages = Math.ceil(videoGames.length / ITEMS_PER_PAGE)\r\n                const pages = [...Array(totalPages + 1).keys()].slice(1)\r\n\r\n                const indexOfLastPage = ITEMS_PER_PAGE\r\n                const indexOfFirstPage = indexOfLastPage - ITEMS_PER_PAGE\r\n\r\n                const vgRender = videoGames.slice(indexOfFirstPage, indexOfLastPage)\r\n\r\n                return{\r\n                    ...state,\r\n                    currentPage: 1,\r\n                    filteredPaginate: videoGames,\r\n                    pages: pages,\r\n                    paginado: vgRender\r\n                }\r\n            } else{\r\n                return{\r\n                    ...state, coincidences:false, paginado:[]\r\n                }\r\n            }\r\n\r\n\r\n        case REMOVE_ALL_FILTER:\r\n            return{\r\n                ...state,\r\n                arr_of_filterObjs: []\r\n            }    \r\n\r\n        case SEARCH_NAME:\r\n            const response = action.payload\r\n            if(response.length>0){\r\n                const totalPages = Math.ceil(response.length / ITEMS_PER_PAGE)\r\n                const pages = [...Array(totalPages + 1).keys()].slice(1)\r\n\r\n                const indexOfLastPage = ITEMS_PER_PAGE\r\n                const indexOfFirstPage = indexOfLastPage - ITEMS_PER_PAGE\r\n\r\n                const vgRender = response.slice(indexOfFirstPage, indexOfLastPage)\r\n\r\n              return{\r\n                ...state,\r\n                currentPage: 1,\r\n                filteredPaginate: response,\r\n                pages: pages,\r\n                paginado: vgRender,\r\n                coincidences: true\r\n              }\r\n            }else{\r\n              return{\r\n                ...state,\r\n                coincidences: false,\r\n                paginado:[]\r\n              }\r\n            };  \r\n        case DELETE_VGAME:\r\n            return{\r\n                ...state\r\n            }   \r\n        case UPDATE_VGAME:\r\n            return {\r\n                ...state,\r\n                detail:  action.payload\r\n            }      \r\n        case CLEAR_DETAIL:\r\n             return{\r\n                ...state, detail: {}\r\n             }               \r\n        default:\r\n            return{\r\n                ...state\r\n            }\r\n        }\r\n};\r\n\r\nexport default rootReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}